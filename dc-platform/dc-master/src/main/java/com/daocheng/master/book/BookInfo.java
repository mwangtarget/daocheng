package com.daocheng.master.book;

import java.io.Serializable;
import java.time.LocalDate;
import java.time.LocalTime;

import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.PropertyDefinition;

import com.daocheng.master.user.UserInfo;
import com.opengamma.strata.basics.StandardId;
import com.opengamma.strata.basics.currency.Currency;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.Set;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 * Book information
 * 
 * 
 * @author mwang
 *
 */
@BeanDefinition
public final class BookInfo implements ImmutableBean, Serializable {
    
    @PropertyDefinition(get = "optional")
    private final StandardId id;
    
    @PropertyDefinition(get = "optional")
    private final UserInfo owner;

    @PropertyDefinition(get = "optional")
    private final Currency accountingCurrency;

    @PropertyDefinition(get = "optional")
    private final Currency plCurrency;
    
    @PropertyDefinition(get = "optional")
    private final LocalDate creationDate;

    @PropertyDefinition(get = "optional")
    private final LocalTime creationTime;
    
    
    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code BookInfo}.
     * @return the meta-bean, not null
     */
    public static BookInfo.Meta meta() {
        return BookInfo.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(BookInfo.Meta.INSTANCE);
    }

    /**
     * The serialization version id.
     */
    private static final long serialVersionUID = 1L;

    /**
     * Returns a builder used to create an instance of the bean.
     * @return the builder, not null
     */
    public static BookInfo.Builder builder() {
        return new BookInfo.Builder();
    }

    private BookInfo(
            StandardId id,
            UserInfo owner,
            Currency accountingCurrency,
            Currency plCurrency,
            LocalDate creationDate,
            LocalTime creationTime) {
        this.id = id;
        this.owner = owner;
        this.accountingCurrency = accountingCurrency;
        this.plCurrency = plCurrency;
        this.creationDate = creationDate;
        this.creationTime = creationTime;
    }

    @Override
    public BookInfo.Meta metaBean() {
        return BookInfo.Meta.INSTANCE;
    }

    @Override
    public <R> Property<R> property(String propertyName) {
        return metaBean().<R>metaProperty(propertyName).createProperty(this);
    }

    @Override
    public Set<String> propertyNames() {
        return metaBean().metaPropertyMap().keySet();
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the id.
     * @return the optional value of the property, not null
     */
    public Optional<StandardId> getId() {
        return Optional.ofNullable(id);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the owner.
     * @return the optional value of the property, not null
     */
    public Optional<UserInfo> getOwner() {
        return Optional.ofNullable(owner);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the accountingCurrency.
     * @return the optional value of the property, not null
     */
    public Optional<Currency> getAccountingCurrency() {
        return Optional.ofNullable(accountingCurrency);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the plCurrency.
     * @return the optional value of the property, not null
     */
    public Optional<Currency> getPlCurrency() {
        return Optional.ofNullable(plCurrency);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the creationDate.
     * @return the optional value of the property, not null
     */
    public Optional<LocalDate> getCreationDate() {
        return Optional.ofNullable(creationDate);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the creationTime.
     * @return the optional value of the property, not null
     */
    public Optional<LocalTime> getCreationTime() {
        return Optional.ofNullable(creationTime);
    }

    //-----------------------------------------------------------------------
    /**
     * Returns a builder that allows this bean to be mutated.
     * @return the mutable builder, not null
     */
    public Builder toBuilder() {
        return new Builder(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            BookInfo other = (BookInfo) obj;
            return JodaBeanUtils.equal(id, other.id) &&
                    JodaBeanUtils.equal(owner, other.owner) &&
                    JodaBeanUtils.equal(accountingCurrency, other.accountingCurrency) &&
                    JodaBeanUtils.equal(plCurrency, other.plCurrency) &&
                    JodaBeanUtils.equal(creationDate, other.creationDate) &&
                    JodaBeanUtils.equal(creationTime, other.creationTime);
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(id);
        hash = hash * 31 + JodaBeanUtils.hashCode(owner);
        hash = hash * 31 + JodaBeanUtils.hashCode(accountingCurrency);
        hash = hash * 31 + JodaBeanUtils.hashCode(plCurrency);
        hash = hash * 31 + JodaBeanUtils.hashCode(creationDate);
        hash = hash * 31 + JodaBeanUtils.hashCode(creationTime);
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(224);
        buf.append("BookInfo{");
        buf.append("id").append('=').append(id).append(',').append(' ');
        buf.append("owner").append('=').append(owner).append(',').append(' ');
        buf.append("accountingCurrency").append('=').append(accountingCurrency).append(',').append(' ');
        buf.append("plCurrency").append('=').append(plCurrency).append(',').append(' ');
        buf.append("creationDate").append('=').append(creationDate).append(',').append(' ');
        buf.append("creationTime").append('=').append(JodaBeanUtils.toString(creationTime));
        buf.append('}');
        return buf.toString();
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code BookInfo}.
     */
    public static final class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code id} property.
         */
        private final MetaProperty<StandardId> id = DirectMetaProperty.ofImmutable(
                this, "id", BookInfo.class, StandardId.class);
        /**
         * The meta-property for the {@code owner} property.
         */
        private final MetaProperty<UserInfo> owner = DirectMetaProperty.ofImmutable(
                this, "owner", BookInfo.class, UserInfo.class);
        /**
         * The meta-property for the {@code accountingCurrency} property.
         */
        private final MetaProperty<Currency> accountingCurrency = DirectMetaProperty.ofImmutable(
                this, "accountingCurrency", BookInfo.class, Currency.class);
        /**
         * The meta-property for the {@code plCurrency} property.
         */
        private final MetaProperty<Currency> plCurrency = DirectMetaProperty.ofImmutable(
                this, "plCurrency", BookInfo.class, Currency.class);
        /**
         * The meta-property for the {@code creationDate} property.
         */
        private final MetaProperty<LocalDate> creationDate = DirectMetaProperty.ofImmutable(
                this, "creationDate", BookInfo.class, LocalDate.class);
        /**
         * The meta-property for the {@code creationTime} property.
         */
        private final MetaProperty<LocalTime> creationTime = DirectMetaProperty.ofImmutable(
                this, "creationTime", BookInfo.class, LocalTime.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "id",
                "owner",
                "accountingCurrency",
                "plCurrency",
                "creationDate",
                "creationTime");

        /**
         * Restricted constructor.
         */
        private Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return id;
                case 106164915:  // owner
                    return owner;
                case -390647354:  // accountingCurrency
                    return accountingCurrency;
                case -1826183635:  // plCurrency
                    return plCurrency;
                case 1585531693:  // creationDate
                    return creationDate;
                case 1586015820:  // creationTime
                    return creationTime;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BookInfo.Builder builder() {
            return new BookInfo.Builder();
        }

        @Override
        public Class<? extends BookInfo> beanType() {
            return BookInfo.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code id} property.
         * @return the meta-property, not null
         */
        public MetaProperty<StandardId> id() {
            return id;
        }

        /**
         * The meta-property for the {@code owner} property.
         * @return the meta-property, not null
         */
        public MetaProperty<UserInfo> owner() {
            return owner;
        }

        /**
         * The meta-property for the {@code accountingCurrency} property.
         * @return the meta-property, not null
         */
        public MetaProperty<Currency> accountingCurrency() {
            return accountingCurrency;
        }

        /**
         * The meta-property for the {@code plCurrency} property.
         * @return the meta-property, not null
         */
        public MetaProperty<Currency> plCurrency() {
            return plCurrency;
        }

        /**
         * The meta-property for the {@code creationDate} property.
         * @return the meta-property, not null
         */
        public MetaProperty<LocalDate> creationDate() {
            return creationDate;
        }

        /**
         * The meta-property for the {@code creationTime} property.
         * @return the meta-property, not null
         */
        public MetaProperty<LocalTime> creationTime() {
            return creationTime;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return ((BookInfo) bean).id;
                case 106164915:  // owner
                    return ((BookInfo) bean).owner;
                case -390647354:  // accountingCurrency
                    return ((BookInfo) bean).accountingCurrency;
                case -1826183635:  // plCurrency
                    return ((BookInfo) bean).plCurrency;
                case 1585531693:  // creationDate
                    return ((BookInfo) bean).creationDate;
                case 1586015820:  // creationTime
                    return ((BookInfo) bean).creationTime;
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            metaProperty(propertyName);
            if (quiet) {
                return;
            }
            throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
        }

    }

    //-----------------------------------------------------------------------
    /**
     * The bean-builder for {@code BookInfo}.
     */
    public static final class Builder extends DirectFieldsBeanBuilder<BookInfo> {

        private StandardId id;
        private UserInfo owner;
        private Currency accountingCurrency;
        private Currency plCurrency;
        private LocalDate creationDate;
        private LocalTime creationTime;

        /**
         * Restricted constructor.
         */
        private Builder() {
        }

        /**
         * Restricted copy constructor.
         * @param beanToCopy  the bean to copy from, not null
         */
        private Builder(BookInfo beanToCopy) {
            this.id = beanToCopy.id;
            this.owner = beanToCopy.owner;
            this.accountingCurrency = beanToCopy.accountingCurrency;
            this.plCurrency = beanToCopy.plCurrency;
            this.creationDate = beanToCopy.creationDate;
            this.creationTime = beanToCopy.creationTime;
        }

        //-----------------------------------------------------------------------
        @Override
        public Object get(String propertyName) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return id;
                case 106164915:  // owner
                    return owner;
                case -390647354:  // accountingCurrency
                    return accountingCurrency;
                case -1826183635:  // plCurrency
                    return plCurrency;
                case 1585531693:  // creationDate
                    return creationDate;
                case 1586015820:  // creationTime
                    return creationTime;
                default:
                    throw new NoSuchElementException("Unknown property: " + propertyName);
            }
        }

        @Override
        public Builder set(String propertyName, Object newValue) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    this.id = (StandardId) newValue;
                    break;
                case 106164915:  // owner
                    this.owner = (UserInfo) newValue;
                    break;
                case -390647354:  // accountingCurrency
                    this.accountingCurrency = (Currency) newValue;
                    break;
                case -1826183635:  // plCurrency
                    this.plCurrency = (Currency) newValue;
                    break;
                case 1585531693:  // creationDate
                    this.creationDate = (LocalDate) newValue;
                    break;
                case 1586015820:  // creationTime
                    this.creationTime = (LocalTime) newValue;
                    break;
                default:
                    throw new NoSuchElementException("Unknown property: " + propertyName);
            }
            return this;
        }

        @Override
        public Builder set(MetaProperty<?> property, Object value) {
            super.set(property, value);
            return this;
        }

        @Override
        public Builder setString(String propertyName, String value) {
            setString(meta().metaProperty(propertyName), value);
            return this;
        }

        @Override
        public Builder setString(MetaProperty<?> property, String value) {
            super.setString(property, value);
            return this;
        }

        @Override
        public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
            super.setAll(propertyValueMap);
            return this;
        }

        @Override
        public BookInfo build() {
            return new BookInfo(
                    id,
                    owner,
                    accountingCurrency,
                    plCurrency,
                    creationDate,
                    creationTime);
        }

        //-----------------------------------------------------------------------
        /**
         * Sets the id.
         * @param id  the new value
         * @return this, for chaining, not null
         */
        public Builder id(StandardId id) {
            this.id = id;
            return this;
        }

        /**
         * Sets the owner.
         * @param owner  the new value
         * @return this, for chaining, not null
         */
        public Builder owner(UserInfo owner) {
            this.owner = owner;
            return this;
        }

        /**
         * Sets the accountingCurrency.
         * @param accountingCurrency  the new value
         * @return this, for chaining, not null
         */
        public Builder accountingCurrency(Currency accountingCurrency) {
            this.accountingCurrency = accountingCurrency;
            return this;
        }

        /**
         * Sets the plCurrency.
         * @param plCurrency  the new value
         * @return this, for chaining, not null
         */
        public Builder plCurrency(Currency plCurrency) {
            this.plCurrency = plCurrency;
            return this;
        }

        /**
         * Sets the creationDate.
         * @param creationDate  the new value
         * @return this, for chaining, not null
         */
        public Builder creationDate(LocalDate creationDate) {
            this.creationDate = creationDate;
            return this;
        }

        /**
         * Sets the creationTime.
         * @param creationTime  the new value
         * @return this, for chaining, not null
         */
        public Builder creationTime(LocalTime creationTime) {
            this.creationTime = creationTime;
            return this;
        }

        //-----------------------------------------------------------------------
        @Override
        public String toString() {
            StringBuilder buf = new StringBuilder(224);
            buf.append("BookInfo.Builder{");
            buf.append("id").append('=').append(JodaBeanUtils.toString(id)).append(',').append(' ');
            buf.append("owner").append('=').append(JodaBeanUtils.toString(owner)).append(',').append(' ');
            buf.append("accountingCurrency").append('=').append(JodaBeanUtils.toString(accountingCurrency)).append(',').append(' ');
            buf.append("plCurrency").append('=').append(JodaBeanUtils.toString(plCurrency)).append(',').append(' ');
            buf.append("creationDate").append('=').append(JodaBeanUtils.toString(creationDate)).append(',').append(' ');
            buf.append("creationTime").append('=').append(JodaBeanUtils.toString(creationTime));
            buf.append('}');
            return buf.toString();
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}
